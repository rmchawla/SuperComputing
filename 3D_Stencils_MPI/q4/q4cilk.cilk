#include <cstring>
#include <iostream>
#include <fstream>
#include <cilk.h>
#include <cilkview.h>
#include <algorithm>
#include <iostream>
#include <iterator>
#include <functional>
#include <limits>
#include <string>
#define K 3

void printMatrix(double ***);
void evaluateMatrix(double * , int , int ,double *);


extern "C++" void evaluateMatrix_CPP(double *a, int n , int numberOfPlanes , double *c)
{
	cilk::run(evaluateMatrix,a,n,numberOfPlanes,c);
}


void evaluateMatrix(double *a , int  n , int numberOfPlanes, double *c )
{
  double *d;
  double *swap;
  

  d = (double *)malloc((numberOfPlanes + 6)*n*n*sizeof(double));

  //for(int t = 1; t <=tfinal; t++ )
  //{
    cilk_for(int x =3;  x<numberOfPlanes+3 ; x++)
    {
	cilk_for(int y =0 ; y<n ;y++)
	{
	   cilk_for(int z =0 ; z<n; z++)
	   {
  	      double ksum = 0;
	      double temp = 0;
	      for(int i = 1;i <= K ; i++)
   	      {
		ksum = 0 ;
		if((x-i) >= 0)
		   ksum+= a[(x-i)*n*n + y*n +z];
		if((x+i) < n)
		   ksum += a[(x+i)*n*n + y*n + z];
		if((y+i) < n)
		   ksum+=a[x*n*n + (y+i)*n + z];
		if((y-i) >= 0)
		   ksum += a[x*n*n + (y-i)*n + z];
		if((z-i) >= 0)
		   ksum += a[x*n*n + y*n + (z-i)];
		if((z+i) < n)
		   ksum += a[x*n*n + y*n + (z+i)];
		temp += (c[i]*ksum);		  
              }
	        d[x*n*n + y*n + z] = c[0]*a[x*n*n + y*n + z] + temp; 
           }
	}
    }
   
 for(int x =3;  x<numberOfPlanes+3 ; x++)
    {
        for(int y =0 ; y<n ;y++)
        {
           for(int z =0 ; z<n; z++)
           {
		a[x*n*n+y*n+z] = d[x*n*n + y*n +z];
	   }
	}
   }	
   free(d);
  
}

/*
void printMatrix(double ***s)
{
  std::cout<<"\n\n\n\n\n\n";
  for(int i = 0; i<n;i++)
   {
     for(int j=0;j<n;j++)
        {
//           std::cout<<"\n";
           for(int k =0; k<n ;k++)
            {
              // std::cin>>s[i][j][k];
               std::cout<<s[i][j][k]<<"\t";
            }
        }
   }
}
*/

int cilk_main(int argc , char* argv[])
{

 double *a;
 int i , j ,k;
 int n, tfinal;
 double c[4];
 std::cin>>n;
 std::cout<<n;
 std::cin>>tfinal;
 std::cout<<tfinal;
  

 for(int i =0; i<4;i++)
  { 
      std::cin>>c[i];
  }


   a = (double *)malloc(n*n*n*sizeof(double));	
   for(i = 0; i<n;i++)
   {
     for(j=0;j<n;j++)
	{
	    std::cout<<"\n";
	   for(k =0; k<n ;k++)
	    {
	       std::cin>>a[i*n*n+j*n+k];
	       std::cout<<a[i*n*n + j*n + k]<<"\t";
	    }
        }
   }	

//evaluateMatrix(a , n , tfinal , c);

// for printing the final result.
for(i = 0; i<n;i++)
   {
     for(j=0;j<n;j++)
        {
	   std::cout<<"\n";
           for(k =0; k<n ;k++)
            {
               std::cout<<a[i*n*n + j*n + k]<<"\t";
            }
        }
   }

}
